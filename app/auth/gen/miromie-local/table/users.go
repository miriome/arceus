//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Users = newUsersTable("miromie-local", "users", "")

type usersTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Pronouns   mysql.ColumnString
	Styles     mysql.ColumnString
	Username   mysql.ColumnString
	Email      mysql.ColumnString
	Password   mysql.ColumnString
	Name       mysql.ColumnString
	PhotoName  mysql.ColumnString
	Height     mysql.ColumnString
	Weight     mysql.ColumnString
	Bust       mysql.ColumnString
	Waist      mysql.ColumnString
	Hips       mysql.ColumnString
	Followers  mysql.ColumnInteger
	DeviceType mysql.ColumnString
	Token      mysql.ColumnString
	CreatedAt  mysql.ColumnTimestamp
	UpdatedAt  mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UsersTable struct {
	usersTable

	NEW usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		NEW:        newUsersTableImpl("", "new", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		PronounsColumn   = mysql.StringColumn("pronouns")
		StylesColumn     = mysql.StringColumn("styles")
		UsernameColumn   = mysql.StringColumn("username")
		EmailColumn      = mysql.StringColumn("email")
		PasswordColumn   = mysql.StringColumn("password")
		NameColumn       = mysql.StringColumn("name")
		PhotoNameColumn  = mysql.StringColumn("photo_name")
		HeightColumn     = mysql.StringColumn("height")
		WeightColumn     = mysql.StringColumn("weight")
		BustColumn       = mysql.StringColumn("bust")
		WaistColumn      = mysql.StringColumn("waist")
		HipsColumn       = mysql.StringColumn("hips")
		FollowersColumn  = mysql.IntegerColumn("followers")
		DeviceTypeColumn = mysql.StringColumn("device_type")
		TokenColumn      = mysql.StringColumn("token")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		UpdatedAtColumn  = mysql.TimestampColumn("updated_at")
		allColumns       = mysql.ColumnList{IDColumn, PronounsColumn, StylesColumn, UsernameColumn, EmailColumn, PasswordColumn, NameColumn, PhotoNameColumn, HeightColumn, WeightColumn, BustColumn, WaistColumn, HipsColumn, FollowersColumn, DeviceTypeColumn, TokenColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = mysql.ColumnList{PronounsColumn, StylesColumn, UsernameColumn, EmailColumn, PasswordColumn, NameColumn, PhotoNameColumn, HeightColumn, WeightColumn, BustColumn, WaistColumn, HipsColumn, FollowersColumn, DeviceTypeColumn, TokenColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return usersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Pronouns:   PronounsColumn,
		Styles:     StylesColumn,
		Username:   UsernameColumn,
		Email:      EmailColumn,
		Password:   PasswordColumn,
		Name:       NameColumn,
		PhotoName:  PhotoNameColumn,
		Height:     HeightColumn,
		Weight:     WeightColumn,
		Bust:       BustColumn,
		Waist:      WaistColumn,
		Hips:       HipsColumn,
		Followers:  FollowersColumn,
		DeviceType: DeviceTypeColumn,
		Token:      TokenColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
