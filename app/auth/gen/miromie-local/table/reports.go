//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Reports = newReportsTable("miromie-local", "reports", "")

type reportsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	ReportType mysql.ColumnString
	TypeID     mysql.ColumnInteger
	Reason     mysql.ColumnString
	ReportedBy mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ReportsTable struct {
	reportsTable

	NEW reportsTable
}

// AS creates new ReportsTable with assigned alias
func (a ReportsTable) AS(alias string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReportsTable with assigned schema name
func (a ReportsTable) FromSchema(schemaName string) *ReportsTable {
	return newReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReportsTable with assigned table prefix
func (a ReportsTable) WithPrefix(prefix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReportsTable with assigned table suffix
func (a ReportsTable) WithSuffix(suffix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReportsTable(schemaName, tableName, alias string) *ReportsTable {
	return &ReportsTable{
		reportsTable: newReportsTableImpl(schemaName, tableName, alias),
		NEW:          newReportsTableImpl("", "new", ""),
	}
}

func newReportsTableImpl(schemaName, tableName, alias string) reportsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		ReportTypeColumn = mysql.StringColumn("report_type")
		TypeIDColumn     = mysql.IntegerColumn("type_id")
		ReasonColumn     = mysql.StringColumn("reason")
		ReportedByColumn = mysql.IntegerColumn("reported_by")
		allColumns       = mysql.ColumnList{IDColumn, ReportTypeColumn, TypeIDColumn, ReasonColumn, ReportedByColumn}
		mutableColumns   = mysql.ColumnList{ReportTypeColumn, TypeIDColumn, ReasonColumn, ReportedByColumn}
	)

	return reportsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ReportType: ReportTypeColumn,
		TypeID:     TypeIDColumn,
		Reason:     ReasonColumn,
		ReportedBy: ReportedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
