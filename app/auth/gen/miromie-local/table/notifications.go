//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Notifications = newNotificationsTable("miromie-local", "notifications", "")

type notificationsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnInteger
	UserID           mysql.ColumnInteger
	PostID           mysql.ColumnInteger
	NotificationType mysql.ColumnString
	Content          mysql.ColumnString
	SentBy           mysql.ColumnInteger
	CreatedAt        mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type NotificationsTable struct {
	notificationsTable

	NEW notificationsTable
}

// AS creates new NotificationsTable with assigned alias
func (a NotificationsTable) AS(alias string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NotificationsTable with assigned schema name
func (a NotificationsTable) FromSchema(schemaName string) *NotificationsTable {
	return newNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NotificationsTable with assigned table prefix
func (a NotificationsTable) WithPrefix(prefix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NotificationsTable with assigned table suffix
func (a NotificationsTable) WithSuffix(suffix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNotificationsTable(schemaName, tableName, alias string) *NotificationsTable {
	return &NotificationsTable{
		notificationsTable: newNotificationsTableImpl(schemaName, tableName, alias),
		NEW:                newNotificationsTableImpl("", "new", ""),
	}
}

func newNotificationsTableImpl(schemaName, tableName, alias string) notificationsTable {
	var (
		IDColumn               = mysql.IntegerColumn("id")
		UserIDColumn           = mysql.IntegerColumn("user_id")
		PostIDColumn           = mysql.IntegerColumn("post_id")
		NotificationTypeColumn = mysql.StringColumn("notification_type")
		ContentColumn          = mysql.StringColumn("content")
		SentByColumn           = mysql.IntegerColumn("sent_by")
		CreatedAtColumn        = mysql.TimestampColumn("created_at")
		allColumns             = mysql.ColumnList{IDColumn, UserIDColumn, PostIDColumn, NotificationTypeColumn, ContentColumn, SentByColumn, CreatedAtColumn}
		mutableColumns         = mysql.ColumnList{UserIDColumn, PostIDColumn, NotificationTypeColumn, ContentColumn, SentByColumn, CreatedAtColumn}
	)

	return notificationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		UserID:           UserIDColumn,
		PostID:           PostIDColumn,
		NotificationType: NotificationTypeColumn,
		Content:          ContentColumn,
		SentBy:           SentByColumn,
		CreatedAt:        CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
