//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("miromielocal", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	Pronouns   postgres.ColumnString
	Styles     postgres.ColumnString
	Username   postgres.ColumnString
	Email      postgres.ColumnString
	Password   postgres.ColumnString
	Name       postgres.ColumnString
	PhotoName  postgres.ColumnString
	Height     postgres.ColumnString
	Weight     postgres.ColumnString
	Bust       postgres.ColumnString
	Waist      postgres.ColumnString
	Hips       postgres.ColumnString
	Followers  postgres.ColumnInteger
	DeviceType postgres.ColumnString
	Token      postgres.ColumnString
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		PronounsColumn   = postgres.StringColumn("pronouns")
		StylesColumn     = postgres.StringColumn("styles")
		UsernameColumn   = postgres.StringColumn("username")
		EmailColumn      = postgres.StringColumn("email")
		PasswordColumn   = postgres.StringColumn("password")
		NameColumn       = postgres.StringColumn("name")
		PhotoNameColumn  = postgres.StringColumn("photo_name")
		HeightColumn     = postgres.StringColumn("height")
		WeightColumn     = postgres.StringColumn("weight")
		BustColumn       = postgres.StringColumn("bust")
		WaistColumn      = postgres.StringColumn("waist")
		HipsColumn       = postgres.StringColumn("hips")
		FollowersColumn  = postgres.IntegerColumn("followers")
		DeviceTypeColumn = postgres.StringColumn("device_type")
		TokenColumn      = postgres.StringColumn("token")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, PronounsColumn, StylesColumn, UsernameColumn, EmailColumn, PasswordColumn, NameColumn, PhotoNameColumn, HeightColumn, WeightColumn, BustColumn, WaistColumn, HipsColumn, FollowersColumn, DeviceTypeColumn, TokenColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{PronounsColumn, StylesColumn, UsernameColumn, EmailColumn, PasswordColumn, NameColumn, PhotoNameColumn, HeightColumn, WeightColumn, BustColumn, WaistColumn, HipsColumn, FollowersColumn, DeviceTypeColumn, TokenColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Pronouns:   PronounsColumn,
		Styles:     StylesColumn,
		Username:   UsernameColumn,
		Email:      EmailColumn,
		Password:   PasswordColumn,
		Name:       NameColumn,
		PhotoName:  PhotoNameColumn,
		Height:     HeightColumn,
		Weight:     WeightColumn,
		Bust:       BustColumn,
		Waist:      WaistColumn,
		Hips:       HipsColumn,
		Followers:  FollowersColumn,
		DeviceType: DeviceTypeColumn,
		Token:      TokenColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
